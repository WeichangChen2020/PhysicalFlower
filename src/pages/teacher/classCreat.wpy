<style type="less">
.greetingc {
  font-size: 14px;
  color: gray;
  margin: 20rpx 0 10rpx 20rpx;
  display: flex;
  justify-content: center;
}
.greeting {
  font-size: 14px;
  color: gray;
  margin: 20rpx 0 10rpx 20rpx;
}
input{
  width: 300rpx;
  border: 2rpx solid rgba(0, 0, 0, 0.301);
  border-radius:10rpx; 
  margin: 20rpx 0 10rpx 20rpx;
  color: #000;
  font-family: "仿宋";
  font-size: 12px;
}
</style>
<template>
	<view>
		<text class="greetingc">增加课程</text>
    <view>
      <block>
      <text class="greeting">课程名称：</text>
      <input placeholder="请输入课程名称"  maxlength="15" placeholder-class="inputi" @input="input"/>
      </block>
      <button class="greeting" @tap="tap">提交</button>
    </view>
	</view>
</template>
<script>
  import wepy from 'wepy'

  // 通过继承自wepy.page的类创建页面逻辑
  export default class classCreat extends wepy.page {
    // 可用于页面模板绑定的数据
    data = {
      course: ''
    };

    // 事件处理函数(集中保存在methods对象中)
    methods = {
      input(e) {
        // console.log(e.detail.value)
        this.course = e.detail
        console.log(this.course)
      },
      tap(e) {
        // let app = this.$parent
        // var courseDATA = {
        //   questionSet: 1,
        //   courseName: this.course.value
        // }
        // app.request('courseName', courseDATA, 'loading').than((d) => console.log(d))
        wx.request({
          url: this.$parent.globalData.apiUrl,
          method: 'post',
          data: {
            pf: 'wx',
            tag: 'courseCreate',
            questionSet: 1,
            courseName: this.course.value
          },
          success(e) {
            console.log(e)
          }
        })
        console.log(e)
        if (this.course !== '') { // todo 发送到后台接口，创建课程，然后到教师界面请求（navigateto不可以导航到tabbar，navigateback不可以传值，只能用storage做桥梁,这里暂时这样做）
          // wx.setStorageSync('course_name', this.course.value)
          wx.navigateBack({
            delta: 1
          })
        } else {
          wx.showModal({
            title: '提示',
            content: '课程名称不能为空',
            showCancel: false
          })
        }
      }
    };

    // 页面的生命周期函数
    onLoad() {
      console.log('onLoad')
    };
  }
</script>
