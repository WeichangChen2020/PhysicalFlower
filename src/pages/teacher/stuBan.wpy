<style type="less">
page {
  width: 100%;
  height: 100%;
}
.list{
  width: 200rpx;
  height: 200rpx;
  border: 1px solid #ccc;
}
.padding{
  margin-top: 10%;
}
.weui-grid {
 padding:10px 10px;
 background: #FFFFFF
}
.button {
  width:85%;
  margin-top:15rpx;
  background:linear-gradient(150deg, #e0eafc, #cfdef3);
  color:whitesmoke;
  border-radius:31rpx;
  display:flex;
  flex-direction:row;
  align-items:center;
  justify-content:center;
  font-size: 30rpx;
  }
</style>
<template>
<view>
  <toast />
 <view>课程学生</view>
     <view class="page__bd">
        <view class="weui-grids">
            <block wx:for="{{courseStu}}" wx:key="*this">
                <navigator url="" class="weui-grid" hover-class="weui-grid_active">
                    <image class="weui-grid__icon" src="{{item.avatarUrl}}" />
                    <view class="weui-grid__label">{{item.name}}</view>
                     <!-- <view class="weui-grid__label">{{item.stunum}}</view> -->
                     <view class="weui-grid__label">{{item.stunum}}</view>
                    <button @tap='ban' class='button' data-idUser="{{item.idUser}}">删除</button>
                </navigator>
            </block>
        </view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import Toast from '@/components/toast/index'

  // 通过继承自wepy.page的类创建页面逻辑
  export default class stuBan extends wepy.page {
    components = {
      'toast': Toast
    }
    config = {
      navigationBarTitleText: '已加入学生'
    }

    data = {
      idCourse: 0,
      courseStu: []
    };

    // 事件处理函数(集中保存在methods对象中)
    methods = {
      ban(e) {
        let app = this.$parent
        let that = this
        let idUser = e.currentTarget.dataset.iduser
        let postData = {
          idUser: idUser,
          idCourse: that.idCourse
        }
        app.request('Course.delStuInCourse', postData, 'Loading...')
        .then((res) => {
          console.log(res)
          if (res.data.errCode === 0) {
            // setTimeout(() => {
              // that.courseStu = []
              // that.onLoad({idCourse: that.idCourse}, {courseName: that.courseName})
            let tmp = []
            that.courseStu.forEach(element => {
              if (element.idUser === idUser) {
                // 只会跳出当前循环，不会中断整个函数
                return
              }
              tmp.push(element)
            })
            that.courseStu = tmp
            that.$apply()
            // }, 800)
            const options = {
              content: res.data.errCode === 0 ? '删除成功' : '请稍后重试！',
              position: 'middle',
              duration: 2000,
              type: res.data.errCode === 0 ? 'success' : 'warning'
            }
            that.$invoke('toast', 'show', options)
          } else {
            app.toast('请稍后再试！')
          }
        })
      }
    }

    // 页面的生命周期函数
    onLoad(e) {
      let app = this.$parent
      let that = this
      that.idCourse = e.idCourse
      that.courseName = e.courseName
      var postData = {
        idCourse: that.idCourse
      }
      app.request('Teacher.getStudentListByIdCourse', postData, '查询中...')
      .then((res) => {
        console.log(res)
        if (res.data.errCode === 0) {
        //   that.courseStu = res.data.data
          for (var i = 0; i < res.data.data.length; i++) {
            if (res.data.data[i].addStatus === '1') {
              that.courseStu.push(res.data.data[i])
              that.$apply()
            }
          }
          console.log(that.courseStu)
        } else if (res.data.errCode === 101) {
          app.toast('没有人加入！')
        } else {
          app.toast('请稍后再试！')
        }
      })
    }
    onShow() {
    }
    onPullDownRefresh() {
      let that = this
      that.courseStu = []
      that.onLoad({idCourse: that.idCourse}, {courseName: that.courseName})
      wx.stopPullDownRefresh()
    }
  }
</script>
